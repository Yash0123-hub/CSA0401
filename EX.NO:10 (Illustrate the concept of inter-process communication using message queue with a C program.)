#include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <sys/types.h>
#include <string.h>
#include <unistd.h>

// Message structure
struct msg_buffer {
    long msg_type;
    char msg_text[100];
};

int main() {
    key_t key;
    int msgid;
    struct msg_buffer message;

    // Generate unique key
    key = ftok("progfile", 65);

    // Create message queue and return id
    msgid = msgget(key, 0666 | IPC_CREAT);
    if (msgid == -1) {
        perror("msgget");
        exit(1);
    }

    int pid = fork();

    if (pid > 0) {
        // Parent Process: Send message
        message.msg_type = 1;
        strcpy(message.msg_text, "Hello from Parent Process!");
        msgsnd(msgid, &message, sizeof(message.msg_text), 0);
        printf("Parent: Message sent to child.\n");
        wait(NULL);  // wait for child
    } 
    else if (pid == 0) {
        // Child Process: Receive message
        sleep(1); // ensure parent sends first
        msgrcv(msgid, &message, sizeof(message.msg_text), 1, 0);
        printf("Child: Message received from parent: %s\n", message.msg_text);
    }

    // Remove the message queue (by parent only)
    if (pid > 0)
        msgctl(msgid, IPC_RMID, NULL);

    return 0;
}
