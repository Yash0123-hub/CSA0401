#include <stdio.h>
#include <string.h>

struct {
    char dname[10];
    char fname[10][10];
    int fcount;
} dir[10];

int main() {
    int dcount = 0, i, j, ch;
    char d[10], f[10];

    printf("\n--- Two Level Directory Simulation ---\n");

    while (1) {
        printf("\nMenu:\n");
        printf("1. Create Directory\n");
        printf("2. Create File\n");
        printf("3. Delete File\n");
        printf("4. Search File\n");
        printf("5. Display\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &ch);

        switch (ch) {
        case 1: // Create Directory
            printf("Enter directory name: ");
            scanf("%s", d);
            for (i = 0; i < dcount; i++) {
                if (strcmp(d, dir[i].dname) == 0) {
                    printf("Directory already exists!\n");
                    break;
                }
            }
            if (i == dcount) {
                strcpy(dir[dcount].dname, d);
                dir[dcount].fcount = 0;
                dcount++;
                printf("Directory '%s' created successfully.\n", d);
            }
            break;

        case 2: // Create File
            printf("Enter directory name: ");
            scanf("%s", d);
            for (i = 0; i < dcount; i++) {
                if (strcmp(d, dir[i].dname) == 0) {
                    printf("Enter file name: ");
                    scanf("%s", f);
                    for (j = 0; j < dir[i].fcount; j++) {
                        if (strcmp(f, dir[i].fname[j]) == 0) {
                            printf("File already exists!\n");
                            break;
                        }
                    }
                    if (j == dir[i].fcount) {
                        strcpy(dir[i].fname[dir[i].fcount], f);
                        dir[i].fcount++;
                        printf("File '%s' created in directory '%s'.\n", f, d);
                    }
                    break;
                }
            }
            if (i == dcount)
                printf("Directory not found!\n");
            break;

        case 3: // Delete File
            printf("Enter directory name: ");
            scanf("%s", d);
            for (i = 0; i < dcount; i++) {
                if (strcmp(d, dir[i].dname) == 0) {
                    printf("Enter file name to delete: ");
                    scanf("%s", f);
                    for (j = 0; j < dir[i].fcount; j++) {
                        if (strcmp(f, dir[i].fname[j]) == 0) {
                            strcpy(dir[i].fname[j], dir[i].fname[dir[i].fcount - 1]);
                            dir[i].fcount--;
                            printf("File '%s' deleted from directory '%s'.\n", f, d);
                            break;
                        }
                    }
                    if (j == dir[i].fcount)
                        printf("File not found!\n");
                    break;
                }
            }
            if (i == dcount)
                printf("Directory not found!\n");
            break;

        case 4: // Search File
            printf("Enter directory name: ");
            scanf("%s", d);
            for (i = 0; i < dcount; i++) {
                if (strcmp(d, dir[i].dname) == 0) {
                    printf("Enter file name to search: ");
                    scanf("%s", f);
                    for (j = 0; j < dir[i].fcount; j++) {
                        if (strcmp(f, dir[i].fname[j]) == 0) {
                            printf("File '%s' found in directory '%s'.\n", f, d);
                            break;
                        }
                    }
                    if (j == dir[i].fcount)
                        printf("File not found!\n");
                    break;
                }
            }
            if (i == dcount)
                printf("Directory not found!\n");
            break;

        case 5: // Display directories and files
            printf("\nDirectory Structure:\n");
            for (i = 0; i < dcount; i++) {
                printf("\nDirectory: %s\n", dir[i].dname);
                for (j = 0; j < dir[i].fcount; j++)
                    printf("  %s\n", dir[i].fname[j]);
            }
            break;

        case 6:
            printf("Exiting...\n");
            return 0;

        default:
            printf("Invalid choice!\n");
        }
    }
}
