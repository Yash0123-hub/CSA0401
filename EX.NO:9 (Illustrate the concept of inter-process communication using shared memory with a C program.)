#include <stdio.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/types.h>
#include <unistd.h>
#include <string.h>

int main() {
    // Create unique key
    key_t key = ftok("shmfile", 65);

    // Create shared memory segment
    int shmid = shmget(key, 1024, 0666 | IPC_CREAT);

    // Fork a process
    int pid = fork();

    if (pid > 0) {
        // Parent process
        char *str = (char *)shmat(shmid, NULL, 0);
        printf("Parent: Writing to shared memory...\n");
        strcpy(str, "Hello from Parent Process!");
        shmdt(str);  // detach memory
        wait(NULL);  // wait for child to read
    } 
    else if (pid == 0) {
        // Child process
        sleep(1); // small delay to ensure parent writes first
        char *str = (char *)shmat(shmid, NULL, 0);
        printf("Child: Reading from shared memory...\n");
        printf("Data read: %s\n", str);
        shmdt(str); // detach memory
    }

    // Only parent removes shared memory
    if (pid > 0)
        shmctl(shmid, IPC_RMID, NULL);

    return 0;
}
