/* file: reader_writer.c
   Compile: gcc -pthread -o reader_writer reader_writer.c
   Run: ./reader_writer
*/

#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

sem_t mutex, wrt;   // Semaphores
int readcount = 0;  // Number of readers currently reading
int data = 0;       // Shared resource

void *reader(void *arg) {
    int id = (int)(long)arg;

    sem_wait(&mutex);           // Entry section for reader
    readcount++;
    if (readcount == 1)
        sem_wait(&wrt);         // First reader locks the writer
    sem_post(&mutex);

    // Critical section for reading
    printf("Reader %d is reading data = %d\n", id, data);
    sleep(1);

    sem_wait(&mutex);           // Exit section for reader
    readcount--;
    if (readcount == 0)
        sem_post(&wrt);         // Last reader releases the writer
    sem_post(&mutex);

    printf("Reader %d finished reading\n", id);
    return NULL;
}

void *writer(void *arg) {
    int id = (int)(long)arg;

    sem_wait(&wrt);             // Only one writer at a time
    data++;                     // Modify the shared resource
    printf("Writer %d is writing data = %d\n", id, data);
    sleep(2);
    sem_post(&wrt);

    printf("Writer %d finished writing\n", id);
    return NULL;
}

int main() {
    pthread_t r[5], w[3];

    // Initialize semaphores
    sem_init(&mutex, 0, 1);
    sem_init(&wrt, 0, 1);

    // Create reader and writer threads
    for (int i = 0; i < 5; i++)
        pthread_create(&r[i], NULL, reader, (void *)(long)i);

    for (int i = 0; i < 3; i++)
        pthread_create(&w[i], NULL, writer, (void *)(long)i);

    // Wait for all threads to finish
    for (int i = 0; i < 5; i++)
        pthread_join(r[i], NULL);
    for (int i = 0; i < 3; i++)
        pthread_join(w[i], NULL);

    // Destroy semaphores
    sem_destroy(&mutex);
    sem_destroy(&wrt);

    printf("\nSimulation complete.\n");
    return 0;
}
