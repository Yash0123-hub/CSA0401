#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

// Function executed by each thread
void* task(void* arg) {
    int thread_id = *((int*)arg);
    printf("Thread %d: Running...\n", thread_id);
    sleep(1); // Simulate work
    printf("Thread %d: Finished execution.\n", thread_id);
    return NULL;
}

int main() {
    pthread_t threads[3];
    int thread_ids[3];

    printf("Main: Creating threads...\n");

    for (int i = 0; i < 3; i++) {
        thread_ids[i] = i + 1;
        if (pthread_create(&threads[i], NULL, task, &thread_ids[i]) != 0) {
            perror("Failed to create thread");
            exit(1);
        }
    }

    // Wait for all threads to finish
    for (int i = 0; i < 3; i++) {
        pthread_join(threads[i], NULL);
    }

    printf("Main: All threads finished.\n");
    return 0;
}
