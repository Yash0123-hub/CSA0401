#include <stdio.h>
#include <stdlib.h>

int mutex = 1;     // Binary semaphore for mutual exclusion
int full = 0;      // Counts number of full slots
int empty = 3;     // Counts number of empty slots (buffer size = 3)
int x = 0;         // Item counter

void producer() {
    --mutex;
    ++full;
    --empty;
    x++;
    printf("\nProducer produces item %d", x);
    ++mutex;
}

void consumer() {
    --mutex;
    --full;
    ++empty;
    printf("\nConsumer consumes item %d", x);
    x--;
    ++mutex;
}

int main() {
    int n;
    printf("Producer-Consumer Problem Simulation\n");

    while (1) {
        printf("\n\n1. Produce\n2. Consume\n3. Exit");
        printf("\nEnter your choice: ");
        scanf("%d", &n);

        switch (n) {
        case 1:
            if ((mutex == 1) && (empty != 0))
                producer();
            else
                printf("\nBuffer is full! Producer waiting...");
            break;

        case 2:
            if ((mutex == 1) && (full != 0))
                consumer();
            else
                printf("\nBuffer is empty! Consumer waiting...");
            break;

        case 3:
            printf("\nExiting...");
            exit(0);

        default:
            printf("\nInvalid choice!");
        }
    }
}
